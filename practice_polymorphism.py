# 問題 1: Pythonにおける多態性とは何ですか？
# A. 同じ名前のメソッドが異なるクラスで異なる振る舞いをすること
# B. クラスが異なるメソッドを持つこと
# C. 一つのクラスが複数の形を持つこと
# D. 変数が複数の型を持つこと

# ＜解答＞
# A. 同じ名前のメソッドが異なるクラスで異なる振る舞いをすること


# 問題 2: Pythonで多態性を実現するために必要な特性は何ですか？
# A. インヘリタンス
# B. エンカプセレーション
# C. グローバリゼーション
# D. ローカリゼーション

# ＜解答＞
# A. インヘリタンス



# 問題 3: どのPythonの機能が多態性をサポートしていますか？
# A. リスト
# B. ループ
# C. 関数

# ＜解答＞
# C. 関数



# 問題 4: オブジェクト指向プログラミングにおいて、多態性がもたらすメリットは何ですか？
# A. コードの短縮
# B. コードの再利用性の向上
# C. プログラムの実行速度の向上
# D. メモリ使用量の削減

# ＜解答＞
# B. コードの再利用性の向上


# 問題 5: Pythonにおいて、以下のコードが多態性の例である理由を説明してください。
def add(a, b):
    return a + b

print(add(10, 5))
print(add("Hello ", "world!"))
# A. 異なるクラスのオブジェクトに対して同じ操作を適用できるから
# B. 'add'関数が複数の型に対応しているから
# C. 'print'関数が異なる型を処理できるから
# D. AとBの両方が正しい

# ＜解答＞
# B. 'add'関数が複数の型に対応しているから


# 問題 6: Pythonにおいて、多態性を示すのに適切な例はどれですか？
# A. 複数の関数が同じ名前を持つ
# B. 一つの関数が異なるクラスのオブジェクトに対して異なる操作を行う
# C. 同じクラスのインスタンスが異なる属性値を持つ
# D. 一つのクラスが異なるクラスを継承する

# ＜解答＞
# B. 一つの関数が異なるクラスのオブジェクトに対して異なる操作を行う


# 問題 7: 以下のコードの実行結果は何ですか？
class Animal:
    def speak(self):
        return "Some sound"

class Dog(Animal):
    def speak(self):
        return "Woof"

def animal_sound(animal):
    print(animal.speak())

animal_sound(Animal())
animal_sound(Dog())
# A. Some sound Woof
# B. Woof Woof
# C. Some sound Some
# sound
# D. エラー

# ＜解答＞
# A. Some sound Woof

# 問題 8: Pythonで多態性を利用する際の主な利点は何ですか？
# A. プログラムの実行速度を高める
# B. より厳密な型チェックを提供する
# C. コードの柔軟性と拡張性を向上させる
# D. 変数のスコープを拡大する

# ＜解答＞
# C. コードの柔軟性と拡張性を向上させる


# 問題 9: 以下のクラス定義に基づいて、多態性の原則に従った実装とはどれですか？
class Shape:
    def draw(self):
        pass

class Circle(Shape):
    def draw(self):
        print("Drawing a circle")

class Square(Shape):
    def draw(self):
        print("Drawing a square")
# A. 'Shape'クラスの'draw'メソッドを直接呼び出す
# B. 'Circle'と'Square'のオブジェクトで'draw'メソッドを異なる実装でオーバーライドする
# C. 'Shape'クラスから'Circle'クラスへの自動型変換を行う
# D. 'draw'メソッド内で'Shape'クラスのインスタンスを作成する

# ＜解答＞
# B. 'Circle'と'Square'のオブジェクトで'draw'メソッドを異なる実装でオーバーライドする


# 問題 10: 多態性を使用することの主な目的は何ですか？
# A. クラス間の依存関係を減らす
# B. コードの複雑さを増やす
# C. クラスのインスタンス化を自動化する
# D. より効率的なメモリ使用を促進する

# ＜解答＞
# A. クラス間の依存関係を減らす