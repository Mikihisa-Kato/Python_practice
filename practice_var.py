# 問題1: 変数 a に 10 を、変数 b に 20 を代入し、これら二つの変数の和を計算して、新しい変数 c に代入してください。
a = 10
b = 20
c = a + b
print(c)

# 問題2: 二つの変数 x と y があり、x には 5 を、y には 3 を代入します。次に、これらの変数を使って、x の y 乗の結果を新しい変数 z に代入してください。
x = 5
y = 3
z = x**y
print(z)

# 問題3: 三つの変数 p, q, r にそれぞれ 4, 8, 2 を代入します。これらの変数を使って、次の計算式の結果を新しい変数 s に代入してください: (p * q) / r。
p = 4
q = 8
r = 2
s =(p * q) / 2
print(s)

# 問題4: 変数 name に文字列 "Alice" を代入し、その後、name に "Bob" を代入します。最終的に name に格納されている値を述べてください。実行せずに答えてください。また理由を答えてください

# <結論>
# nameに格納されている値　Bob
# <理由>
# 文字列はイミュータブルであるため、最初に変数に'Alice'を代入し、その後、'Bob'を変数に代入すると
# メモリ上に新しく文字列'Bob'が追加される。そして変数がその文字列を参照するようになるため。


# 問題5: 変数 a に 10 を、変数 b に a を代入します。その後で、a に 20 を代入します。この時点で、b に格納されている値を述べてください。実行せずに答えてください。また理由を答えてください

# <結論>
# bに格納されている値　10
# <理由>
# まず、数字はint型でイミュータブルなものである。そのため、a=10とa=20はそれぞれ別のもの。
# b = aとすると、変数bがメモリ上にあるaと同じアドレスを参照することになるため、bに格納されている値は10である。


# 問題6: リスト list1 を [1, 2, 3] で初期化し、list2 = list1 を実行した後、list1.append(4) を実行します。list2 の内容を述べて、なぜそのような結果になるのか説明してください。実行せずに答えてください。また理由を答えてください

# <結論>
# list2の内容　[1, 2, 3, 4]
# <理由>
# リストはミュータブルである。
# つまり、メモリ上のアドレスではなく、同じ値を参照するため、
# list1の変更はlist2の結果にも影響を及ぼすため、list2の内容も[1, 2, 3, 4]に書き換わる。


# 問題7: Pythonにおいて、関数内で定義された変数はどのスコープに属しますか？実行せずに答えてください。

# A. グローバルスコープ
# B. ローカルスコープ
# C. 組み込みスコープ
# D. クラススコープ

# <解答>
# B. ローカルスコープ


# 問題8: 関数内でグローバル変数の値を変更したい場合、何を行う必要がありますか？実行せずに答えてください。

# A. 変数名の前に`global`キーワードを使用する
# B. 変数名の前に`nonlocal`キーワードを使用する
# C. 変数名の前に`extern`キーワードを使用する
# D. 特に何もする必要はない

# <解答>
# A. 変数名の前に`global`キーワードを使用する


# 問題9: ネストされた関数内で、エンクロージング関数（外側の関数）の変数を変更するにはどうすればよいですか？実行せずに答えてください。

# A. エンクロージング関数の変数名の前に`global`キーワードを使用する
# B. エンクロージング関数の変数名の前に`nonlocal`キーワードを使用する
# C. エンクロージング関数の変数名の前に`extern`キーワードを使用する
# D. 特に何もする必要はない

# <解答>
# B. エンクロージング関数の変数名の前に`nonlocal`キーワードを使用する


# 問題10: 以下のコードを実行した場合、最終的な出力は何になりますか？実行せずに答えてください。
x = 10

def outer():
    x = 20
    def inner():
        global x
        x = 30
    inner()
    print(x)

outer()
print(x)
# A. 20, 30
# B. 30, 30
# C. 20, 20
# D. 30, 20

# <解答>
# A. 20, 30
# <理由>
# outer関数が呼び出されると、新しいローカル変数xに20が代入される。
# inner関数が呼び出されると、outer関数内のprint(x)はローカル変数xの20を出力する。
# また、outer関数実行後、inner関数にあるglobal宣言によりグローバルスコープのx=10がX=30に変更されているため、
# 最後にあるprint(x)は30を出力する。


# 問題11: Pythonで定義された変数が参照できる範囲を何と呼びますか？実行せずに答えてください。

# A. スコープ
# B. レンジ
# C. セッション
# D. ドメイン

# <解答>
# A. スコープ


# 問題12: 次のコードを実行した際に、`print`関数は何を出力しますか？実行せずに答えてください。
def my_function():
    var = 2
    print(var)

var = 1
my_function()
print(var)
# A. 2, 1
# B. 1, 2
# C. 2, 2
# D. 1, 1

# <解答>
#A. 2, 1
# <理由>
# my_fanction関数でvar = 2が設定され、my_fanction関数内のprint(var)で2が出力される。
# グローバルスコープでvar = 1が設定され、最後のprint(var)でグローバルスコープの変数var = 1が出力される。


# 問題13: 以下のコードを実行した場合、print関数が出力する値は何ですか？実行せずに答えてください。
def outer():
    x = "local"
    def inner():
        nonlocal x
        x = "nonlocal"
        print("Inner:", x)
    inner()
    print("Outer:", x)

outer()
# A. Inner: nonlocal, Outer: local
# B. Inner: local, Outer: nonlocal
# C. Inner: nonlocal, Outer: nonlocal
# D. Inner: local, Outer: local

# <解答>
# C. Inner: nonlocal, Outer: nonlocal
# <理由>
# outer関数が呼び出されると、ローカル変数xに'local'が代入される。
# outer関数が呼び出し後、inner関数が実行され、別のローカル変数xに'nonlocal'が代入されて、
# inner関数内のprint関数でInner: nonlocalが出力される。
# また、inner関数内のnonlocal宣言によってouter関数直下の変数x='local'が x = 'nonlocal'に変更され、
# outer関数内のprint関数でOuter: nonlocalが出力される。