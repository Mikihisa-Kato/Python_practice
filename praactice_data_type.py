# 問題1: 変数 number に整数 5 を代入し、変数 text に文字列 "5" を代入します。これら二つの変数を比較した結果（number == text）と（number === text）を述べてください。実行せずに答えてください。また理由を答えてください

# ①number == text
# <結果>
# False
# <理由>
# 変数numberには整数5、変数textには文字列'5'が格納されており、
# 異なるデータ型同士の比較になるため。

# ②number === text
# <結果>
# エラー
# <理由>
# Pythonの比較演算子には「===」というものが存在しないため、
# ②を実行すると構文エラーになる


# 問題2: リスト numbers が [1, 2, 3] で初期化されています。このリストに文字列 "4" を追加し、その後全ての要素の和を求めるコードを書いてください。この時、どのような問題が発生するか述べてください。実行せずに答えてください。また理由を答えてください

# <コード>
numbers = [1, 2, 3]
numbers.append('4')
sum(numbers)

# <発生する問題>
# sum(numbers)を実行すると、1~3はint型であるのに対し、'4'は文字列型であるため
# 異なる型を足し合わせることになるため、エラーが発生すると考えられる。


# 問題3: 変数 a に整数 10 を、変数 b に浮動小数点数 2.5 を代入します。これら二つの変数を足し合わせた結果を変数 c に代入し、c のデータ型を確認してください。
a = 10
b =2.5
c = a + b
print(type(c))
# cのデータ型はfloat型


# 問題4: 文字列 "123" を整数に変換し、それを変数 number に代入してください。その後、number のデータ型を確認してください。
num_str = '123'
number = int(num_str)
print(type(number))
# numberのデータ型はint型


# 問題5: Pythonで文字列を表すデータ型はどれですか？実行せずに答えてください。また理由を答えてください。
# A. char
# B. str
# C. string
# D. text

# <解答>
# B. str
# <理由>
# pythonにおいて文字列を表すデータ型はstrであり、そのほかの選択肢は存在しないデータ型であるから。


# 問題6: Pythonで真または偽を表すデータ型はどれですか？実行せずに答えてください。また理由を答えてください。
# A. truefalse
# B. boolean
# C. bool
# D. bit

# <解答>
# C. bool
# <理由>
# Aは真偽値を表すためのデータ型ではない。
# Bはboolの正式な用語であり、データ型ではない。
# cは2進数のビットを表す用語であり、データ型ではない。


# 問題7: 次のうち、変更可能（mutable）なデータ型として正しくないものはどれですか？実行せずに答えてください。また理由を答えてください。
# A. リスト
# B. タプル
# C. 辞書
# D. セット

# <解答>
# B. タプル
# <理由>
# タプルはイミュータブルなデータ型であり、その要素の変更や削除、追加などはできないため。


# 問題8: 次のうち、キーと値のペアでデータを格納するデータ型はどれですか？実行せずに答えてください。また理由を答えてください。
# A. リスト
# B. タプル
# C. 辞書
# D. セット

# <解答>
# C. 辞書
# <理由>
# 辞書型は「キー:値」でデータを格納するデータ構造になっており、要素は{}で囲む。
#そのほかの選択肢は、キーなどはなく要素をカンマ区切りで列挙していく。


# 問題9: 等価と等値を比較するための比較演算子またはメソッドをそれぞれ記載してください
# またそれぞれの違いを答えてください

list1 = [1, 2, 3]
list2 = [1, 2, 3]

print(list1 == list2)  #①
print(list1 is list2)  #②
# 等価はそれぞれのオブジェクトの内容が同じかどうか、
# 等値はそれぞれのオブジェクトが同一の値かどうかを見ている。
# ①はlist1とlist2が等価かどうかを'=='で見ており、
# それぞれは異なるリストではあるが、格納されている内容が同じであるためTrueを返している。
# ②はlist1とlist2が等値かどうかを'is'で見ており、結果はFalseを返す。
# これは「=」での変数listへの代入が参照の引き渡しであり、メモリ上のアドレスが格納されているためである。
print(id(list1))
print(id(list2))
#id関数を実行すると異なる識別値を返すことからわかるように、
# list1とlist2は同じアドレスにある値を参照しているわけではないため②ではFalseを返す。